class Node:
  def __init__(self, val):
    self.val = val
    self.left = None
    self.right = None


# dfs iterative
def tree_min_value(root):
    stack = [root]
    smallest = float("inf")
    while stack:
        curr = stack.pop()
        smallest = curr.val if curr.val < smallest else smallest
        
        if curr.right is not None:
            stack.append(curr.right)
        if curr.left is not None:
            stack.append(curr.left)
    return smallest

#dfs recursive
def tree_min_value(root) -> int:
    if root is None:
        return float('inf')
    
    left = tree_min_value(root.left)
    right = tree_min_value(root.right)

    return min(root.val, left, right)

a = Node(3)
b = Node(11)
c = Node(4)
d = Node(4)
e = Node(-2)
f = Node(1)

a.left = b
a.right = c
b.left = d
b.right = e
c.right = f

print(tree_min_value(a))