from collections import deque
class Node:
  def __init__(self, val):
    self.val = val
    self.left = None
    self.right = None

#dfs recursive
def tree_value_count_dfs(root, target):
    if root is None:
        return 0
    count = 1 if root.val == target else 0
    left = tree_value_count_dfs(root.left, target)
    right = tree_value_count_dfs(root.right, target)
    
    return count + left + right

def tree_value_count(root,target):
    queue = deque([root])
    count = 0
    while queue:
        curr = queue.popleft()
        if curr.val == target:
            count += 1
        if curr.left is not None:
            queue.append(curr.left)
        if curr.right is not None:
            queue.append(curr.right)
    return count


a = Node(12)
b = Node(6)
c = Node(6)
d = Node(4)
e = Node(6)
f = Node(12)

a.left = b
a.right = c
b.left = d
b.right = e
c.right = f

print(tree_value_count(a, 6))